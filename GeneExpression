import random
from tabulate import tabulate

def fitness(path, distances):
    """Calculate total distance of a path"""
    total = 0
    for i in range(len(path)):
        total += distances[path[i]][path[(i + 1) % len(path)]]
    return total

def crossover(parent1, parent2):
    """Order crossover"""
    start, end = sorted(random.sample(range(len(parent1)), 2))
    child = [-1] * len(parent1)
    child[start:end] = parent1[start:end]

    fill_values = [x for x in parent2 if x not in child]
    fill_index = 0
    for i in range(len(child)):
        if child[i] == -1:
            child[i] = fill_values[fill_index]
            fill_index += 1

    return child, (start, end)

def mutate(chromosome):
    """Swap mutation"""
    i, j = random.sample(range(len(chromosome)), 2)
    chromosome[i], chromosome[j] = chromosome[j], chromosome[i]
    return chromosome, (i, j)

def gene_expression(sequence):
    """Ensure gene sequence is a valid TSP path"""
    # Remove duplicates while preserving order
    seen = set()
    path = []
    for gene in sequence:
        if gene not in seen:
            path.append(gene)
            seen.add(gene)
    # Add missing cities
    all_cities = set(range(len(sequence)))
    for city in all_cities - seen:
        path.append(city)
    return path

def gea_tsp(distances, pop_size=4, generations=3):
    n_cities = len(distances)
    population = [random.sample(range(n_cities), n_cities) for _ in range(pop_size)]

    best_path = None
    best_distance = float('inf')

    for gen in range(generations):
        print(f"\n=== Generation {gen+1} ===")
        table = []
        new_population = []

        for i in range(0, len(population), 2):
            parent1 = population[i]
            parent2 = population[(i+1) % len(population)]

            # Crossover
            child, cross_points = crossover(parent1, parent2)
            expressed_child = gene_expression(child)

            # Mutation
            offspring, mut_points = mutate(expressed_child.copy())
            offspring = gene_expression(offspring)

            dist = fitness(offspring, distances)
            if dist < best_distance:
                best_distance = dist
                best_path = offspring.copy()

            table.append([
                parent1, fitness(parent1, distances),
                parent2,
                cross_points, expressed_child,
                mut_points, offspring, dist
            ])

            new_population.append(offspring)

        population = new_population
        headers = ["Parent", "Fitness", "Mate", "Crossover", "After Gene Expression",
                   "Mutation", "Offspring", "Offspring Fitness"]
        print(tabulate(table, headers=headers, tablefmt="grid"))

    print("\nâœ… Shortest Path Found:", best_path, "with Distance:", best_distance)

# ---- User Input ----
if __name__ == "__main__":
    n = int(input("Enter number of cities: "))
    print("Enter distance matrix row by row (space-separated):")
    distances = [list(map(int, input(f"Row {i+1}: ").split())) for i in range(n)]

    pop_size = int(input("Enter population size: "))
    generations = int(input("Enter number of generations: "))

    gea_tsp(distances, pop_size, generations)
